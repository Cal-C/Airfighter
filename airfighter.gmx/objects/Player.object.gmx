<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Death_fattack</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>loopanimation = false;
state = 1; //1-idle 2-attacking 3-hitstun
decell = .05

xspd = 0;
yspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Oku's stand is the only girl we're getting either way
//MOVEMENT KEYBINDS--------------------------------------------------------------------------------------------------
if (state == 1){ // checking state so if character is attacking or in hitstun they cant move
    if keyboard_check(leftkey) //move left
    {
        image_xscale = -1;
        xspd = -5; 
    }
    
    if keyboard_check(rightkey) //move right
    {
        image_xscale = 1;
        xspd = 5;   
    }
    
    if keyboard_check(upkey) //move up
    {
        yspd = -5;   
    }
    
    if keyboard_check(downkey)//move down
    {
        yspd = 5;   
    }
    if(character == 1){
        sprite_index=Death_idlewithscythe;
    }
    if(character == 2 &amp;&amp; speed &lt;= 1){
        sprite_index=HevArty_Idle
    }
    if(character == 2 &amp;&amp; speed &gt; 1){
        sprite_index=HevArty_Move;
    }
}
//Adding decelleration to player
if(state == 1){ decell = .05; }
if(state == 2){ decell = .1; }
if(xspd &gt; 0){
    xspd = max(xspd - decell, 0); 
}
if(xspd &lt; 0){
    xspd = min(xspd + decell, 0); 
}
if(yspd &gt; 0){
    yspd = max(yspd - decell, 0); 
}
if(yspd &lt; 0){
    yspd = min(yspd + decell, 0); 
}


//ATTACK KEYBINDS-----------------------------------------------------------------------------------------------------
if(character == 1){
    if(state == 1 &amp; keyboard_check_pressed(basicattackkey)){
        state = 2
        image_speed = 1/3;

        if(keyboard_check(rightkey)){
            sprite_index = Death_fattack;
            //speed = 10; //DAAAAAASH like a fast boii
        }
        
        if(keyboard_check(leftkey)){
            sprite_index = Death_fattack;
            //speed = 10; //DAAAAAASH like a fast boii
        }
        if(keyboard_check(upkey)){
            sprite_index = Death_uattack;
        }
        if(keyboard_check(downkey)){
            sprite_index = Death_dattack;
        }
        if(!keyboard_check(upkey) and !keyboard_check(downkey) &amp;&amp; !keyboard_check(leftkey) &amp;&amp; !keyboard_check(rightkey)){
            sprite_index = Death_nattack;
        }
    
    }   
}
if(character == 2){
    if(state == 1 &amp;&amp; keyboard_check_pressed(basicattackkey)){
        state = 2;
        image_speed = 1/3;
        if(keyboard_check(rightkey)){
            sprite_index = HevArty_fattack;
            //speed = 10; //DAAAAAASH like a fast boii
        }
        
        if(keyboard_check(leftkey)){
            sprite_index = HevArty_fattack;
            //speed = 10; //DAAAAAASH like a fast boii
        }
        if(keyboard_check(upkey)){
            //sprite_index = Death_uattack;
        }
        if(keyboard_check(downkey)){
            //sprite_index = Death_dattack;
        }
        if(!keyboard_check(upkey) &amp;&amp; !keyboard_check(downkey) &amp;&amp; !keyboard_check(leftkey) &amp;&amp; !keyboard_check(rightkey)){
            //sprite_index = Death_nattack;
        }
    }   
}

//makes ora loop if atack key is held
if(sprite_index == HevArty_fattack &amp;&amp; keyboard_check(basicattackkey)){
    loopanimation = true; 
}
else{
    loopanimation = false;
}

//HitboxTimeMyDudez---------------------------------------------------------------------
hitboxobject.x = x;
hitboxobject.y = y;
hitboxobject.image_xscale = image_xscale;
if(state == 1){
    hitboxobject.sprite_index = nothingsprite;
}
if(state == 2){
    if(character == 2){
        if(sprite_index == HevArty_fattack){
            hitboxobject.sprite_index = HevArty_fattackHB;
        }
    }
}
//HURTBOXES niBBA---------------------------------------------------------
hurtboxobject.x = x;
hurtboxobject.y = y;
hurtboxobject.image_xscale = image_xscale;
if(state == 1)
{
    if(character == 1)
    {
        with Player1_hurtboxes
        {
            if place_meeting(x,y,Player2_hitboxes) == true
            {
                sprite_index = Death_hitstunwithscythe;
            }
        }
    }
}

//updating pos
x = x + xspd;
y = y + yspd;

x = max(x,0);
x = min(x,rm_test.room_width);
y = max(y,0);
y = min(y,rm_test.room_height);


if(!loopanimation){
///PREVENTS ANIMATION LOOPS
    if(image_index == image_number -1){
        image_speed = 0;
        image_index = image_number - 1;
        state = 1;
        if(character == 1){
            sprite_index = Death_idlewithscythe;}
        if(character == 2){
            sprite_index = HevArty_Idle}
        }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
