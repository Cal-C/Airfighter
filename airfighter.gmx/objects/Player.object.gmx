<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Death_fattack</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>loopanimation = false;
state = 1; //1-idle 2-attacking 3-dashing 4-hitstun
newanimation = true;

decell = .05

xspd = 0;
yspd = 0;

xaccel = 0;
yaccel = 0;

maxspeed = 5;
horzvertmovedebuf = 1 //the higher the number the faster characters will move when they're going up and down

currentdmg = 0; //damage of the current move

if(character == 1){
    dashspeed = 10;
    hasscythe = true;
    scythespeed = 6;
}

if(character == 2){
    dashspeed = 10;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Oku's stand is the only girl we're getting either way
//MOVEMENT KEYBINDS--------------------------------------------------------------------------------------------------
if (state == 1){ // checking state so if character is attacking or in hitstun they cant move
    maxspeed = 5;
    if keyboard_check(leftkey) //move left
    {
        image_xscale = -1;
        xaccel = -.5; 
    }
    
    if keyboard_check(rightkey) //move right
    {
        image_xscale = 1;
        xaccel = .5;   
    }
    
    if keyboard_check(upkey) //move up
    {
        yaccel = -.5;   
    }
    
    if keyboard_check(downkey)//move down
    {
        yaccel = .5;   
    }
    if (!keyboard_check(leftkey) and !keyboard_check(rightkey) and !keyboard_check(downkey) and !keyboard_check(upkey)){
    
        yaccel = 0;
        xaccel = 0;
    }
    if(character == 1){
        sprite_index=Death_idlewithscythe;
    }
    if(character == 2 &amp;&amp; abs(xspd)+abs(yspd) &lt;= 1){
        sprite_index=HevArty_Idle
    }
    if(character == 2 &amp;&amp; abs(xspd)+abs(yspd) &gt; 1 &amp;&amp; (keyboard_check(leftkey) or keyboard_check(rightkey) or keyboard_check(upkey) or keyboard_check(downkey))){
        sprite_index=HevArty_Move;
    }
    //making it so the player dosen't move twice as fast when you're moving vertically and horizontally at the same time
    if(keyboard_check(downkey) or keyboard_check(upkey)){
        if(keyboard_check(leftkey) or keyboard_check(rightkey)){
            maxspeed = maxspeed*horzvertmovedebuf;
        }
    }
    
}

//Adding decelleration to player

if(state == 1){ decell = .05; }
if(state == 2){ decell = .1; }
if(state == 3){ decell = 0; }
if(state == 4){ decell = .05; }
if(xspd &gt; 0){
    xspd = max(xspd - decell, 0); 
}
if(xspd &lt; 0){
    xspd = min(xspd + decell, 0); 
}
if(yspd &gt; 0){
    yspd = max(yspd - decell, 0); 
}
if(yspd &lt; 0){
    yspd = min(yspd + decell, 0); 
}


//DASHING
if (state == 1){
    if( keyboard_check(dashkey) ){
        if character == 1{
        if(hasscythe){
        sprite_index = Death_dashwscythe;}
        if(!hasscythe){
        sprite_index = Death_dashwoscythe;}
        image_speed = 1/2;}
        if character == 2{
        sprite_index = HevArty_Dash;
        image_speed = 1/3;}
            yaccel = yaccel*2;
            xaccel = xaccel*2;
            maxspeed = dashspeed;
            state = 3;
            
            
            //making it so the player dosen't move twice as fast when you're moving vertically and horizontally at the same time
            if(keyboard_check(downkey) or keyboard_check(upkey)){
                if(keyboard_check(leftkey) or keyboard_check(rightkey)){
                    maxspeed = maxspeed*horzvertmovedebuf;
            }
        }
    }
}




//ATTACK KEYBINDS-----------------------------------------------------------------------------------------------------
if(character == 1){
    if(state == 1 &amp; keyboard_check_pressed(basicattackkey)){
        state = 2;
        image_speed = 1/3;
        global.hypenum = global.hypenum + 1;
        if(hasscythe){
            if(keyboard_check(rightkey)){
                sprite_index = Death_fattack;
            }
            
            if(keyboard_check(leftkey)){
                sprite_index = Death_fattack;
            }
            if(keyboard_check(upkey)){
                sprite_index = Death_uattack;
            }
            if(keyboard_check(downkey)){
                sprite_index = Death_dattack;
            }
            if(!keyboard_check(upkey) and !keyboard_check(downkey) &amp;&amp; !keyboard_check(leftkey) &amp;&amp; !keyboard_check(rightkey)){
                sprite_index = Death_nattack;
                currentdmg = 20;
            }
        }
        if(!hasscythe){
            sprite_index = Death_noscytheattack;
        }
    
    }   
}

if(character == 2){
    if(state == 1 &amp;&amp; keyboard_check_pressed(basicattackkey)){
        
        state = 2;
        image_speed = 1/3;
        global.hypenum = global.hypenum + 1;
        
        if(keyboard_check(rightkey)){
            sprite_index = HevArty_fattack;
            currentdmg = 10;
        }
        
        if(keyboard_check(leftkey)){
            sprite_index = HevArty_fattack;
            currentdmg = 10;
        }
        if(keyboard_check(upkey)){
            sprite_index = HevArty_uattack;

        }
        if(keyboard_check(downkey)){
            sprite_index = HevArty_dattack
        }
        if(!keyboard_check(upkey) &amp;&amp; !keyboard_check(downkey) &amp;&amp; !keyboard_check(leftkey) &amp;&amp; !keyboard_check(rightkey)){
            //sprite_index = Death_nattack;
        }
    }
}   


//makes ora loop if attack key is held

if(sprite_index == HevArty_fattack &amp;&amp; keyboard_check(basicattackkey)){
    loopanimation = true; 
}
else{
    loopanimation = false;
}


if(state == 2){
    xaccel = 0;
    yaccel = 0;
}

//special moves
if(keyboard_check_pressed(specialkey)){
    if(character = 1){
        if(state = 1){
            if(hasscythe){
                scy = instance_create(x,y,scythe); 
                scy.stopmoving = 120;
                scy.xspeed = 0;
                scy.yspeed = 0;
                dirkeyspressed = 0;
                
                if(keyboard_check(upkey)){
                    scy.yspeed = scy.yspeed + -scythespeed*(global.hypenum+1);
                    dirkeyspressed++;  
                }
                
                if(keyboard_check(downkey)){
                    scy.yspeed = scy.yspeed + scythespeed*(global.hypenum+1);
                    dirkeyspressed++;  
                }
                
                if(keyboard_check(rightkey)){
                    scy.xspeed = scy.xspeed + scythespeed*(global.hypenum+1);
                    dirkeyspressed++;
                }
                
                if(keyboard_check(leftkey)){
                    scy.xspeed = scy.xspeed + -scythespeed*(global.hypenum+1); 
                    dirkeyspressed++;
                }
                
                if(dirkeyspressed &gt;= 2){
                    scy.xspeed = scy.xspeed/2;
                    scy.yspeed = scy.yspeed/2;
                }
                
                hasscythe = false;
            }
            if(!hasscythe){
                if(place_meeting(x,y,scythe)){
                    scy = instance_place(x,y,scythe);
                    if(scy.frames != 0){
                        with (scy) instance_destroy();
                        hasscythe = true;
                    }
                    
                }
            
            }
        }
    }


}





//updating pos
xspd = xspd + xaccel*global.hypemulti;
yspd = yspd + yaccel*global.hypemulti;

xspd = min(maxspeed*global.hypemulti,xspd);
xspd = max(-maxspeed*global.hypemulti,xspd);
yspd = min(maxspeed*global.hypemulti,yspd);
yspd = max(-maxspeed*global.hypemulti,yspd);

//HYPE IT UP
//increases the speed of animation if it's a new animation
//unsure if i want to add this. A) gamemaker dosen't work well with this code due to image speeds exceeding 1 B) it would make moves dificult for players to time...
/*
if(image_index == 0){
    if(newanimation){
        image_speed = image_speed*global.hypemulti;
        newanimation = false;
    }
}

if(image_index != 0){
    newanimation  = true;
}
*/

x = x + xspd;
y = y + yspd;

x = max(x,0+64);
x = min(x,rm_test.room_width-64);
y = max(y,0+64);
y = min(y,rm_test.room_height-50-64);



if(!loopanimation){
///PREVENTS ANIMATION LOOPS
    if(image_index == image_number -1){
        image_speed = 0;
        image_index = image_number - 1;
        if(state == 3){
        xspd = min(xspd,5);
        xspd = max(xspd,-5);
        yspd = min(yspd,5);
        yspd = max(yspd,-5);
        }
        state = 1;
        currentdmg = 0;
        if(character == 1){
            if(hasscythe){
                sprite_index = Death_idlewithscythe;}
            if(!hasscythe){
                sprite_index = Death_idlenoscythe;}
            }
        if(character == 2){
            sprite_index = HevArty_Idle;}
        }
}

//HitboxTimeMyDudez---------------------------------------------------------------------
hitboxobject.x = x;
hitboxobject.y = y;
hitboxobject.image_xscale = image_xscale;
if(state == 1){
    hitboxobject.sprite_index = nothingsprite;
}
if(state == 2){
    if(character == 2){
        if(sprite_index == HevArty_fattack){
            hitboxobject.sprite_index = HevArty_fattackHB;
            hitboxobject.image_speed = image_speed;
        }
    }
    if(character == 1){
        if(sprite_index == Death_nattack){
            hitboxobject.sprite_index = Death_nattackhb;
            hitboxobject.image_speed = image_speed;
        }
    }
}

//HURTBOXES---------------------------------------------------------
hurtboxobject.x = x;
hurtboxobject.y = y;
hurtboxobject.image_xscale = image_xscale;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
